name: SourceForge Release to GitHub Sync

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest release info from SourceForge
        run: |
          curl -s "https://sourceforge.net/projects/projectorria/best_release.json" \
            > release.json
          DOWNLOAD_URL=$(jq -r '.platform_releases.linux.url' release.json)
          FILENAME=$(jq -r '.platform_releases.linux.filename' release.json)
          VERSION=$(echo "$FILENAME" \
            | grep -o -E 'V[0-9]+\.[0-9]+\.[0-9]+' \
            | head -1)
          CLEAN_VERSION=${VERSION#V}

          echo "DOWNLOAD_URL=$DOWNLOAD_URL"     >> $GITHUB_ENV
          echo "VERSION=$VERSION"               >> $GITHUB_ENV
          echo "CLEAN_VERSION=$CLEAN_VERSION"   >> $GITHUB_ENV

      - name: Check if release already exists
        run: |
          if git ls-remote --tags origin "v${{ env.CLEAN_VERSION }}" \
             | grep -q .; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Download and extract ZIP
        if: env.RELEASE_EXISTS == 'false'
        run: |
          set -euo pipefail

          # 1) Clean slate
          rm -rf temp_extract projeqtor
          mkdir -p temp_extract projeqtor

          # 2) Grab the ZIP
          curl -L "${{ env.DOWNLOAD_URL }}" \
            -o temp_extract/projeqtor.zip

          # 3) Unzip into temp_extract
          unzip -q temp_extract/projeqtor.zip -d temp_extract

          # 4) If there’s exactly one top-level dir, treat that as our base
          mapfile -t TOPDIRS < <(find temp_extract -maxdepth 1 -mindepth 1 -type d)
          if [ "${#TOPDIRS[@]}" -eq 1 ]; then
            SRC_BASE="${TOPDIRS[0]}"
          else
            SRC_BASE="temp_extract"
          fi

          # 5) Ensure index.php sits there—or else find the first subfolder that does
          if [ -f "$SRC_BASE/index.php" ]; then
            SRC_DIR="$SRC_BASE"
          else
            SRC_DIR=$(find "$SRC_BASE" -type f -name index.php \
                        -exec dirname {} \; \
                      | sort \
                      | head -n1)
          fi

          if [ -z "${SRC_DIR:-}" ] || [ ! -d "$SRC_DIR" ]; then
            echo "❌ ERROR: Could not locate ProjeQtOr files"
            exit 1
          fi
          echo "→ Using source directory: $SRC_DIR"

          # 6) Copy everything (incl. dotfiles) into our repo’s projeqtor/
          cp -a "$SRC_DIR/." projeqtor/

          # 7) Quick sanity check
          echo "Extracted $(find projeqtor -type f | wc -l) files"
          ls -la projeqtor | head -n20

      - name: Create release branch and tag
        if: env.RELEASE_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "GitHub Action Bot"
          git config user.email "action@github.com"

          git checkout -b "release-${{ env.CLEAN_VERSION }}"
          git add projeqtor

          # if nothing got staged, skip commit & tag
          if git diff --cached --quiet; then
            echo "ℹ️  No changes in projeqtor; skipping release."
            exit 0
          fi

          git commit -m "Add ProjeQtOr release ${{ env.VERSION }}"
          git tag "v${{ env.CLEAN_VERSION }}"

          git remote set-url origin \
            https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "release-${{ env.CLEAN_VERSION }}"
          git push origin "v${{ env.CLEAN_VERSION }}"

          echo "✅ Pushed branch and tag v${{ env.CLEAN_VERSION }}"
