name: SourceForge Release to GitHub Sync

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  sync-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get latest release info from SourceForge
        run: |
          curl -s "https://sourceforge.net/projects/projectorria/best_release.json" > release.json
          DOWNLOAD_URL=$(jq -r '.platform_releases.linux.url' release.json)
          FILENAME=$(jq -r '.platform_releases.linux.filename' release.json)
          VERSION=$(echo "$FILENAME" | grep -o -E 'V[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          CLEAN_VERSION=$(echo "$VERSION" | sed 's/^V//')
          
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
      
      - name: Download and extract ZIP
        run: |
          # Create clean working directory
          rm -rf temp_extract
          mkdir -p temp_extract
          cd temp_extract
          
          # Download the ZIP file
          curl -L "${{ env.DOWNLOAD_URL }}" -o projeqtor.zip
          
          # Extract everything
          unzip -q projeqtor.zip
          
          # Find what directories were created
          echo "Directories created by extraction:"
          ls -la
          
          # Create projeqtor directory in repo root
          cd ..
          rm -rf projeqtor
          mkdir -p projeqtor
          
          # Copy EVERYTHING from the extraction to projeqtor
          cp -R temp_extract/. projeqtor/
          
          # Show what we've got
          echo "Files in projeqtor directory:"
          find projeqtor -type f | wc -l
          echo "Top-level items in projeqtor:"
          ls -la projeqtor
      
      - name: Commit and push
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "action@github.com"
          
          git add projeqtor
          git commit -m "Update ProjeQtOr to ${{ env.VERSION }}"
          git tag "v${{ env.CLEAN_VERSION }}"
          
          git push origin main
          git push origin "v${{ env.CLEAN_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
