name: Update Main Branch with Latest SVN

on:
  # Run after SVN to GitHub Sync workflow completes
  workflow_run:
    workflows: ["SVN to GitHub Sync"]
    types:
      - completed
  # Also allow manual trigger
  workflow_dispatch:
    inputs:
      svn_branch:
        description: 'SVN branch to update from (e.g., svn-r1234)'
        required: true
        default: ''

jobs:
  update-main:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded or if manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
      
      - name: Get latest SVN branch
        id: get-latest-branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.svn_branch }}" ]]; then
            LATEST_SVN_BRANCH="${{ github.event.inputs.svn_branch }}"
          else
            LATEST_SVN_BRANCH=$(git branch -r | grep origin/svn-r | sort -V | tail -n 1 | sed 's/origin\///')
          fi
          
          echo "LATEST_SVN_BRANCH=$LATEST_SVN_BRANCH" >> $GITHUB_ENV
          echo "Latest SVN branch is $LATEST_SVN_BRANCH"
          
          # Extract SVN revision number
          SVN_REV=$(echo "$LATEST_SVN_BRANCH" | sed -n 's/^svn-r\([0-9]*\)$/\1/p')
          echo "SVN_REVISION=$SVN_REV" >> $GITHUB_ENV
      
      - name: Checkout SVN branch
        run: |
          git fetch origin ${{ env.LATEST_SVN_BRANCH }}
          
          # Create a temporary branch for the SVN content
          git checkout origin/${{ env.LATEST_SVN_BRANCH }} -b temp-svn-branch
      
      - name: Update main branch
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "action@github.com"
          
          # Switch back to main branch
          git checkout main
          
          # Remove old svn directory if it exists
          rm -rf svn
          
          # Create svn directory
          mkdir -p svn
          
          # Copy content from temp branch to svn directory
          cp -r temp-svn-branch/svn/* svn/
          
          # Stage changes
          git add svn
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update svn directory with revision ${{ env.SVN_REVISION }}"
            git push origin main
            echo "Updated main branch with SVN revision ${{ env.SVN_REVISION }}"
          fi
